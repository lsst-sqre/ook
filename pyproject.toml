[project]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "ook"
description = "Ook is the librarian indexing the Vera C. Rubin Observatory's documentation."
license = "MIT"
license-files = ["LICENSE"]
readme = "README.md"
keywords = ["rubin", "lsst"]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Typing :: Typed",
    "Private :: Do Not Upload",
]
requires-python = ">=3.13"
dependencies = [
    "fastapi",
    "starlette",
    "uvicorn[standard]",
    "pydantic >= 2.0.0",
    "pydantic_settings",
    "safir[db]",
    "alembic[tz]",
    "faststream[kafka]",
    "algoliasearch>=3.0,<4.0",
    "dataclasses-avroschema",
    "click",
    "dateparser",
    "lxml",
    "cssselect", # for lxml
    "lsst-felis", # SDM Schemas support
    "markdown-it-py[linkify,plugins]",
    "aiohttp>=2.0,<4.0", # for algoliasearch
    "async_timeout>=2.0,<4.0", # for algoliasearch
    "pylatexenc>=2.10",
]
dynamic = ["version"]

[project.scripts]
ook = "ook.cli:main"

[project.urls]
Homepage = "https://ook.lsst.io"
Source = "https://github.com/lsst-sqre/ook"

[build-system]
requires = ["setuptools>=61", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[dependency-groups]
dev = [
    "asgi-lifespan",
    "coverage[toml]",
    "httpx",
    "pydantic",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "respx",
]
docs = [
    "documenteer[guide]",
    "autodoc_pydantic",
]
lint = [
    "ruff",
    "pre-commit",
    "pre-commit-uv",
]
nox = [
    "nox",
    "testcontainers[kafka,postgres]"
]
typing = [
    "mypy",
    "pydantic",
    "types-dateparser",
    "types-PyYAML",
]

[tool.setuptools_scm]

[tool.coverage.run]
parallel = true
branch = true
source = ["ook"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.pytest.ini_options]
asyncio_mode = "strict"
# The python_files setting is not for test detection (pytest will pick up any
# test files named *_test.py without this setting) but to enable special
# assert processing in any non-test supporting files under tests.  We
# conventionally put test support functions under tests.support and may
# sometimes use assert in test fixtures in conftest.py, and pytest only
# enables magical assert processing (showing a full diff on assert failures
# with complex data structures rather than only the assert message) in files
# listed in python_files.
python_files = ["tests/*.py", "tests/*/*.py"]

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
local_partial_types = true
plugins = ["pydantic.mypy"]
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

# The rule used with Ruff configuration is to disable every lint that has
# legitimate exceptions that are not dodgy code, rather than cluttering code
# with noqa markers. This is therefore a reiatively relaxed configuration that
# errs on the side of disabling legitimate lints.
#
# Reference for settings: https://beta.ruff.rs/docs/settings/
# Reference for rules: https://beta.ruff.rs/docs/rules/
[tool.ruff]
extend = "ruff-shared.toml"

[tool.ruff.lint]
# Skip unused variable rules (`F841`).
extend-ignore = [
   "TD002",  # don't require authors for TODOs
   "TD004",  # don't require colons for TODOs
]

[tool.ruff.lint.extend-per-file-ignores]
"src/ook/handlers/**" = [
    "D103",    # FastAPI handlers should not have docstrings
]
"src/ook/dependencies/algoliasearch.py" = [
    "D401",    # A dependency does not need to be in imperative mood
]
"src/ook/services/algoliadocindex.py" = [
    "PERF402"  # allow list append here
]
"tests/**" = [
    "D103",    # tests don't need docstrings
    "PLR0915", # tests are allowed to be long, sometimes that's convenient
    "PT012",   # way too aggressive about limiting pytest.raises blocks
    "S101",    # tests should use assert
    "SLF001",  # tests are allowed to access private members
    "T201",    # tests can print
]
"noxfile.py" = [
    "D100",    # noxfile doesn't need docstrings
    "D103",    # noxfile doesn't need docstrings
    "T201",    # print is fine
    "D205",    # summary-only docsting is fine.
]
"src/ook/config.py" = [
    "FBT001",  # positional booleans needed for Pydantic validators
]
"src/ook/domain/**" = [
    "C901",    # long methods
    "PLR0912", # complex methods
    "TRY301",  # Bad exception raising
]

[tool.ruff.lint.isort]
known-first-party = ["ook", "tests"]
split-on-trailing-comma = false

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "pydantic.root_validator",  # for pydantic v1
    "pydantic.validator",  # for pydantic v1
]


[tool.scriv]
categories = [
    "Backwards-incompatible changes",
    "New features",
    "Bug fixes",
    "Other changes",
]
entry_title_template = "{{ version }} ({{ date.strftime('%Y-%m-%d') }})"
format = "md"
md_header_level = "2"
new_fragment_template = "file:changelog.d/_template.md.jinja"
skip_fragments = "_template.md.jinja"
